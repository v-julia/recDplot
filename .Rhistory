list(n1="NS",s1=1,e1=2649,n2="NS",s2=2650,e2=5298),
list(n1="VP1",s1=5299,e1=7044,n2="VP2",s2=7045,e2=7401)
)
for(reg in list_regs_LaV){
print(paste('Lagovirus', reg$n1,reg$n2, sep=', '))
l <-  plot_PDCP_control(lago, reg$s1, reg$e1, reg$s2, reg$e2)
ggsave(file=paste(fig_path,"LaV_",paste(reg$n1, reg$n2, sep="_vs_"), ".png", sep=""),
plot=l[[1]])
}
aln_name = paste("Astrovirus","mav_all_1AB2_aln_noout_gt_trim.fasta", sep="/")
mav = read.dna(paste(path_al, aln_name, sep=""), format="fasta", as.character=TRUE)
mav[mav=='-'] <- NA
list_regs_MAV <- list(
list(n1="NS",s1=1,e1=3411,n2="S",s2=3412,e2=4764),
list(n1="NS",s1=1,e1=1956,n2="NS",s2=1957,e2=3411),
list(n1="VP1",s1=3412,e1=4000,n2="VP2",s2=4001,e2=4764)
)
for(reg in list_regs_MAV){
print(paste('Mamastrovirus', reg$n1,reg$n2, sep=', '))
l <-  plot_PDCP_control(mav, reg$s1, reg$e1, reg$s2, reg$e2)
ggsave(file=paste(fig_path,"MAV_",paste(reg$n1, reg$n2, sep="_vs_"), ".png", sep=""),
plot=l[[1]])
}
aln_name = paste("Picornaviruses","fmdv_full_aln_genotyped.fasta", sep="/")
FMDV = read.dna(paste(path_al, aln_name, sep=""), format="fasta", as.character=TRUE)
FMDV[FMDV=='-'] <- NA
list_regs_FMDV <- list(
list(n1="NS",s1=2800,e1=6990,n2="S",s2=604,e2=2799),
list(n1="NS",s1=2800,e1=4269,n2="NS",s2=4270,e2=6990),
list(n1="VP2-VP4",s1=604,e1=1512,n2="VP3-VP1",s2=1513,e2=2799)
)
for(reg in list_regs_FMDV){
print(paste('Aphthovirus', reg$n1,reg$n2, sep=', '))
l <-  plot_PDCP_control(AphV, reg$s1, reg$e1, reg$s2, reg$e2)
ggsave(file=paste(fig_path,"FMDV_",paste(reg$n1, reg$n2, sep="_vs_"), ".png", sep=""),
plot=l[[1]])
}
aln_name = paste("Picornaviruses","fmdv_full_aln_genotyped.fasta", sep="/")
FMDV = read.dna(paste(path_al, aln_name, sep=""), format="fasta", as.character=TRUE)
FMDV[FMDV=='-'] <- NA
list_regs_FMDV <- list(
list(n1="NS",s1=2800,e1=6990,n2="S",s2=604,e2=2799),
list(n1="NS",s1=2800,e1=4269,n2="NS",s2=4270,e2=6990),
list(n1="VP2-VP4",s1=604,e1=1512,n2="VP3-VP1",s2=1513,e2=2799)
)
for(reg in list_regs_FMDV){
print(paste('Aphthovirus', reg$n1,reg$n2, sep=', '))
l <-  plot_PDCP_control(FMDV, reg$s1, reg$e1, reg$s2, reg$e2)
ggsave(file=paste(fig_path,"FMDV_",paste(reg$n1, reg$n2, sep="_vs_"), ".png", sep=""),
plot=l[[1]])
}
aln_name = paste("Enterovirus","HEV_tr_aln_rt.fasta", sep="/")
HEV = read.dna(paste(path_al, aln_name, sep=""), format="fasta", as.character=TRUE)
HEV[HEV=='-'] <- NA
list_regs_HEV <- list(
list(n1="NS",s1=2977,e1=6723,n2="S",s2=1,e2=2976),
list(n1="NS",s1=2977,e1=4716,n2="NS",s2=4717,e2=6723),
list(n1="VP2-VP4",s1=1,e1=1134,n2="VP3-VP1",s2=1135,e2=2977)
)
for(reg in list_regs_HEV){
print(paste('Enterovirus A-D', reg$n1,reg$n2, sep=', '))
l <-  plot_PDCP_control(HEV, reg$s1, reg$e1, reg$s2, reg$e2)
ggsave(file=paste(fig_path,"HEV_",paste(reg$n1, reg$n2, sep="_vs_"), ".png", sep=""),
plot=l[[1]])
}
library("recDplot")
library(reticulate)
library(colorRamps)
library(svglite)
path_al = "D:/Virology/RNA_viruses/"
fig_path = "D:/Virology/RNA_viruses/PDCPwithControls/"
aln_name = paste("Norovirus","norovirus_full_aln_100gp_0.5_genotyped.fasta", sep="/")
noro = read.dna(paste(path_al, aln_name, sep=""), format="fasta", as.character=TRUE)
noro[noro=='-'] <- NA
list_regs_NoV <- list(
list(n1="Nonstructural region",s1=1,e1=5082,n2="Structural region",s2=5083,e2=7431),
list(n1="5' half of nonstructural region",s1=1,e1=2541,n2="3' half of nonstructural region",s2=2542,e2=5082),
list(n1="VP1",s1=5083,e1=6687,n2="VP2",s2=6688,e2=7431)
)
list_regs_NoV <- list(
list(n1="NS",s1=1,e1=5082,n2="S",s2=5083,e2=7431),
list(n1="NS",s1=1,e1=2541,n2="NS",s2=2542,e2=5082),
list(n1="VP1",s1=5083,e1=6687,n2="VP2",s2=6688,e2=7431)
)
for(reg in list_regs_NoV){
print(paste('Norovirus, all genogroups', reg$n1,reg$n2, sep=', '))
l <-  plot_PDCP_control(noro, reg$s1, reg$e1, reg$s2, reg$e2)
ggsave(file=paste(fig_path,"NoV_",paste(reg$n1, reg$n2, sep="_vs_"), ".png", sep=""),
plot=l[[1]])
}
aln_name = paste("Sapovirus","sapovirus_genomes_full_aln_100gp_0.5_genotyped.fasta", sep="/")
sapo = read.dna(paste(path_al, aln_name, sep=""), format="fasta", as.character=TRUE)
sapo[sapo=='-'] <- NA
list_regs_SaV <- list(
list(n1="NS",s1=1,e1=5091,n2="S",s2=5092,e2=7191),
list(n1="NS",s1=1,e1=2541,n2="NS",s2=2542,e2=5091),
list(n1="VP1",s1=5092,e1=6711,n2="VP2",s2=6712,e2=7191)
)
for(reg in list_regs_SaV){
print(paste('Sapovirus', reg$n1,reg$n2, sep=', '))
l <-  plot_PDCP_control(sapo, reg$s1, reg$e1, reg$s2, reg$e2)
ggsave(file=paste(fig_path,"SaV_",paste(reg$n1, reg$n2, sep="_vs_"), ".png", sep=""),
plot=l[[1]])
}
library(recDplot)
library("recDplot")
library(reticulate)
library(colorRamps)
library(svglite)
path_al = "D:/Virology/RNA_viruses/"
fig_path = "D:/Virology/RNA_viruses/PDCPwithControls/"
aln_name = paste("Sapovirus","sapovirus_genomes_full_aln_100gp_0.5_genotyped.fasta", sep="/")
sapo = read.dna(paste(path_al, aln_name, sep=""), format="fasta", as.character=TRUE)
sapo[sapo=='-'] <- NA
list_regs_SaV <- list(
list(n1="NS",s1=1,e1=5091,n2="S",s2=5092,e2=7191),
list(n1="NS",s1=1,e1=2541,n2="NS",s2=2542,e2=5091),
list(n1="VP1",s1=5092,e1=6711,n2="VP2",s2=6712,e2=7191)
)
for(reg in list_regs_SaV){
print(paste('Sapovirus', reg$n1,reg$n2, sep=', '))
l <-  plot_PDCP_control(sapo, reg$s1, reg$e1, reg$s2, reg$e2)
ggsave(file=paste(fig_path,"SaV_",paste(reg$n1, reg$n2, sep="_vs_"), ".png", sep=""),
plot=l[[1]])
}
aln_name = paste("Lagovirus","Lagovirus_full_aln_0.5_less_amb_genotyped.fasta", sep="/")
lago = read.dna(paste(path_al, aln_name, sep=""), format="fasta", as.character=TRUE)
lago[lago=='-'] <- NA
list_regs_LaV <- list(
list(n1="NS",s1=1,e1=5298,n2="S",s2=5299,e2=7401),
list(n1="NS",s1=1,e1=2649,n2="NS",s2=2650,e2=5298),
list(n1="VP1",s1=5299,e1=7044,n2="VP2",s2=7045,e2=7401)
)
for(reg in list_regs_LaV){
print(paste('Lagovirus', reg$n1,reg$n2, sep=', '))
l <-  plot_PDCP_control(lago, reg$s1, reg$e1, reg$s2, reg$e2)
ggsave(file=paste(fig_path,"LaV_",paste(reg$n1, reg$n2, sep="_vs_"), ".png", sep=""),
plot=l[[1]])
}
aln_name = paste("Astrovirus","mav_all_1AB2_aln_noout_gt_trim.fasta", sep="/")
mav = read.dna(paste(path_al, aln_name, sep=""), format="fasta", as.character=TRUE)
mav[mav=='-'] <- NA
list_regs_MAV <- list(
list(n1="NS",s1=1,e1=3411,n2="S",s2=3412,e2=4764),
list(n1="NS",s1=1,e1=1956,n2="NS",s2=1957,e2=3411),
list(n1="VP1",s1=3412,e1=4000,n2="VP2",s2=4001,e2=4764)
)
for(reg in list_regs_MAV){
print(paste('Mamastrovirus', reg$n1,reg$n2, sep=', '))
l <-  plot_PDCP_control(mav, reg$s1, reg$e1, reg$s2, reg$e2)
ggsave(file=paste(fig_path,"MAV_",paste(reg$n1, reg$n2, sep="_vs_"), ".png", sep=""),
plot=l[[1]])
}
aln_name = paste("Picornaviruses","fmdv_full_aln_genotyped.fasta", sep="/")
FMDV = read.dna(paste(path_al, aln_name, sep=""), format="fasta", as.character=TRUE)
FMDV[FMDV=='-'] <- NA
list_regs_FMDV <- list(
list(n1="NS",s1=2800,e1=6990,n2="S",s2=604,e2=2799),
list(n1="NS",s1=2800,e1=4269,n2="NS",s2=4270,e2=6990),
list(n1="VP2-VP4",s1=604,e1=1512,n2="VP3-VP1",s2=1513,e2=2799)
)
for(reg in list_regs_FMDV){
print(paste('Aphthovirus', reg$n1,reg$n2, sep=', '))
l <-  plot_PDCP_control(FMDV, reg$s1, reg$e1, reg$s2, reg$e2)
ggsave(file=paste(fig_path,"FMDV_",paste(reg$n1, reg$n2, sep="_vs_"), ".png", sep=""),
plot=l[[1]])
}
install.packages("spaa")
library(recDplot)
fig_path = "D:/MY_FILES/DATA/Lukashev/RNA_viruses/Astrovirus/rec_fig/"
path_al = "D:/MY_FILES/DATA/Lukashev/RNA_viruses/Astrovirus/fasta/MAV/"
mav_name = 'mav_all_1AB2_aln_noout_gt_trim.fasta'
mav = read.dna(paste(path_al, 'MAV/', mav_name, sep=""), format="fasta", as.character=TRUE)
mav[mav=='-'] <- NA
path_al = "D:/MY_FILES/DATA/Lukashev/RNA_viruses/Astrovirus/fasta/"
mav = read.dna(paste(path_al, 'MAV/', mav_name, sep=""), format="fasta", as.character=TRUE)
mav[mav=='-'] <- NA
mav_rmse = calc_PDDmatrix(mav, 200, 800, "pdist", "pairwise")
PDD_matrix = calc_PDDmatrix(dna_object=mav, step=200, window=800, method="pdist", modification="pairwise") #calculated PDD matrix
PDD_matrix
heatmap.2(as.matrix(PDD_matrix),Rowv = FALSE, Colv = "Rowv", dendrogram = 'none', col=matlab.like, main="PDD matrix"=NA)
heatmap.2(as.matrix(PDD_matrix), Rowv = FALSE, Colv = "Rowv", dendrogram = 'none', col=matlab.like, main="PDD matrix")
library(colorRamps)
install.packages("colorRamps")
heatmap.2(as.matrix(PDD_matrix), Rowv = FALSE, Colv = "Rowv", dendrogram = 'none', col=matlab.like, main="PDD matrix", tracecol=NA)
library(gplots)
heatmap.2(as.matrix(PDD_matrix), Rowv = FALSE, Colv = "Rowv", dendrogram = 'none', col=matlab.like, main="PDD matrix", tracecol=NA)
library(colorRamps)
heatmap.2(as.matrix(PDD_matrix), Rowv = FALSE, Colv = "Rowv", dendrogram = 'none', col=matlab.like, main="PDD matrix", tracecol=NA)
l <-  plot_dist_test(mav, 1, 500, 501, 1000)
l <-  plot_PDCP_control(mav, 1, 500, 501, 1000)
l[[]1]
l[[1]]
l <-  plot_PDCP_control(mav, 1, 500, 501, 1000)
l[[1]]
l_PDCP <-  plot_PDCP(mav, 1, 500, 501, 1000)
l_PDCP[1]
install.packages("roxygen2")
install.packages("roxygen2")
install.packages("roxygen2")
install.packages(c("pkgload", "cli", "desc"))
library(recDplot)
l <-  plot_PDCP_control(mav, 1, 500, 501, 1000)
heatmap.2(as.matrix(PDD_matrix), Rowv = FALSE, Colv = "Rowv", dendrogram = 'none', col=matlab.like, main="PDD matrix", tracecol=NA)
l <-  plot_PDCP_control(mav, 1, 500, 501, 1000)
l[1]
l_PDCP <-  plot_PDCP(mav, 1, 500, 501, 1000)
l_PDCP[1]
l_PDCP <-  plot_PDCP_with_control(mav, 1, 500, 501, 1000)
l[2]
dist1 = l[2]
dist1 = l[[2]]
as.matrix(dist1)
dist1matrix = as.matrix(dist1)
rownames(dist1)
rownames(dist1matrix)
dist1vector = as.vector(dist1)
dist1vector
library(spaa)
dist2list(l_PDCP[[2]])
d = dist2list(l_PDCP[[2]])
View(d)
fig_path = "D:/MY_FILES/DATA/Lukashev/RNA_viruses/Astrovirus/rec_fig/"
path_al = "D:/MY_FILES/DATA/Lukashev/RNA_viruses/Astrovirus/fasta/"
mav_name = 'mav_all_1AB2_aln_noout_gt_trim.fasta'
mav = read.dna(paste(path_al, 'MAV/', mav_name, sep=""), format="fasta", as.character=TRUE)
mav[mav=='-'] <- NA
l_PDCP <-  plot_PDCP(mav, 1, 500, 501, 1000)
library(recDplot)
l_PDCP <-  plot_PDCP(mav, 1, 500, 501, 1000)
d = dist2list(l_PDCP[[2]])
d1 = dist2list(l_PDCP[[2]])
d2 = dist2list(l_PDCP[[3]])
join(d1, d2)
colnames(d1)
colnames(d2)
d = merge(d1, d2)
View(d)
d = merge(d1, d2, by=c("row", "col"))
View(d2)
View(d1)
spl_df1 = str_split(d$row, '_', simplify = TRUE)
library(stringr)
spl_df1 = str_split(d$row, '_', simplify = TRUE)
spl_df1
mav = read.dna(paste(path_al, 'MAV/', mav_name, sep=""), format="fasta", as.character=TRUE)
mav[mav=='-'] <- NA
l_PDCP <-  plot_PDCP(mav, 1, 500, 501, 1000)
d1 = dist2list(l_PDCP[[2]])
d2 = dist2list(l_PDCP[[3]])
d = merge(d1, d2, by=c("row", "col"))
spl_df1 = str_split(d$row, '_', simplify = TRUE)
spl_df2 = str_split(d$col, '_', simplify = TRUE)
spl_df1
spl_df1[3]
spl_df1[,3]
spl_df1_host = spl_df1[,3]
spl_df2_host = spl_df2[,3]
spl_df1_host == spl_df2_host
res = spl_df1_host == spl_df2_host
only_one_NA = xor(is.na(spl_df1_host), is.na(spl_df2_host))
spl_df1_host
only_one_NA
is.na(spl_df1_host)
spl_df1_host
spl_df1_host == ""NA
spl_df1_host == "NA"
only_one_NA = xor(spl_df1_host=="NA", spl_df2_host=="NA")
only_one_NA
spl_df2_host
both_na = (spl_df1_host=="NA" & spl_df2_host=="NA")
both_na
res
length(spl_df1_host)
host_vector = vector("character", length(spl_df1_host))
host_vector
any_NA = spl_df1_host=="NA" | spl_df2_host=="NA"
c1 = c(1,2,"NA",2)
c2 = c(1,"NA", "NA",3)
c2 == "NA" | c1 =="NA"
c2 == "NA" & c1 =="NA"
c3 = vector("character", length(c1))
c2[c2 == "NA"] = 1
c2 = c(1,"NA", "NA",3)
c3[c2 == "NA"] = 1
c3
host_vector[any_NA == TRUE] = "unknow"
host_vector[any_NA == TRUE] = "unknown"
host_vector[res == FALSE] = "no"
host_vector
host_vector[res == TRUE] = "yes"
host_vector
d = cbind(d, host_vector)
View(d)
colnames(d)
colnames(d)[length(colnames(d))]
colnames(d)[length(colnames(d))] = "same_host"
check_param = function(dist1, dist2, colnum){
d1 = dist2list(dist1)
d2 = dist2list(dist2)
d = merge(d1, d2, by=c("row", "col"))
spl_df1 = str_split(d$row, '_', simplify = TRUE)
spl_df2 = str_split(d$col, '_', simplify = TRUE)
spl_df1_param = spl_df1[,colnum]
spl_df2_param = spl_df2[,colnum]
any_NA = spl_df1_param == "NA" | spl_df2_param == "NA"
same_param = spl_df1_param == spl_df2_param
vector_param = vector("character", length(spl_df1_param))
vector_param[any_NA == TRUE] = "unknown"
vector_param[same_param == TRUE] = "yes"
vector_param[same_param == FALSE] = "no"
d = cbind(d, vector_param)
return(d)
}
df_host = check_param(l_PDCP[[2]], l_PDCP[[3]])
df_host = check_param(l_PDCP[[2]], l_PDCP[[3]])
View(df_host)
df_host = check_param(l_PDCP[[2]], l_PDCP[[3]], 3)
df_host2 = check_param(l_PDCP[[2]], l_PDCP[[3]])
View(df_host2)
colnames(df_host)[length(colnames(df_host))] = "same_host"
View(df_host)
ggplot(df_host,aes(value.x,value.y))+stat_bin2d(binwidth = 0.002)+
scale_fill_gradientn(colours=c("blue","red"))+ theme(legend.justification=c(1,0), legend.position=c(1,0))+
d = merge(d1, d2, by=c("row", "col"))
ggplot(df_host,aes(value.x,value.y))+stat_bin2d(binwidth = 0.002)+
scale_fill_gradientn(colours=c("blue","red"))+ theme(legend.justification=c(1,0), legend.position=c(1,0))
ggplot(df_host,aes(value.x,value.y))+geom_point(color=same_host) + theme(legend.justification=c(1,0), legend.position=c(1,0))
ggplot(df_host,aes(value.x,value.y))+geom_point(colour=same_host) + theme(legend.justification=c(1,0), legend.position=c(1,0))
ggplot(df_host,aes(value.x,value.y))+geom_point(aes(colour="same_host")) + theme(legend.justification=c(1,0), legend.position=c(1,0))
ggplot(df_host)+geom_point(aes(value.x,value.y,colour=same_host) + theme(legend.justification=c(1,0), legend.position=c(1,0))
d = merge(d1, d2, by=c("row", "col"))
d$row
spl_df1 = str_split(d$row, '_', simplify = TRUE)
spl_df1_host = spl_df1[,3]
spl_df2 = str_split(d$col, '_', simplify = TRUE)
spl_df2_host = spl_df2[,3]
res = spl_df1_host == spl_df2_host
only_one_NA = xor(spl_df1_host=="NA", spl_df2_host=="NA")
both_na = (spl_df1_host=="NA" & spl_df2_host=="NA")
any_NA = spl_df1_host=="NA" | spl_df2_host=="NA"
host_vector = vector("character", length(spl_df1_host))
host_vector[any_NA == TRUE] = "unknown"
host_vector[res == TRUE] = "yes"
host_vector[res == FALSE] = "no"
host_vector
d = cbind(d, host_vector)
colnames(d)[length(colnames(d))] = "same_host"
ggplot(df_host)+geom_point(aes(value.x,value.y,colour=same_host)) + theme(legend.justification=c(1,0), legend.position=c(1,0))
check_param = function(dist1, dist2, colnum){
d1 = dist2list(dist1)
d2 = dist2list(dist2)
d = merge(d1, d2, by=c("row", "col"))
spl_df1 = str_split(d$row, '_', simplify = TRUE)
spl_df2 = str_split(d$col, '_', simplify = TRUE)
spl_df1_param = spl_df1[,colnum]
spl_df2_param = spl_df2[,colnum]
any_NA = spl_df1_param == "NA" | spl_df2_param == "NA"
same_param = spl_df1_param == spl_df2_param
vector_param = vector("character", length(spl_df1_param))
vector_param[same_param == TRUE] = "yes"
vector_param[same_param == FALSE] = "no"
vector_param[any_NA == TRUE] = "unknown"
d = cbind(d, vector_param)
return(d)
}
df_host = check_param(l_PDCP[[2]], l_PDCP[[3]], 3)
colnames(df_host)[length(colnames(df_host))] = "same_host"
ggplot(df_host)+geom_point(aes(value.x,value.y,colour=same_host)) + theme(legend.justification=c(1,0), legend.position=c(1,0))
dist_to_df = function(dist1, st1, e1, dist2, st2, e2){
d1 = dist2list(dist1)
d2 = dist2list(dist2)
d = merge(d1, d2, by=c("row", "col"))
colnames(d)[3] = paste(toString(st1),toString(e1),sep=":")
colnames(d)[4] = paste(toString(st2),toString(e2),sep=":")
return(d)
}
dist_df = dist_to_df(l_PDCP[[2]], 1, 500, l_PDCP[[3]], 501, 1000)
View(dist_df)
check_param = function(d, colnum){
spl_df1 = str_split(d$row, '_', simplify = TRUE)
spl_df2 = str_split(d$col, '_', simplify = TRUE)
spl_df1_param = spl_df1[,colnum]
spl_df2_param = spl_df2[,colnum]
any_NA = spl_df1_param == "NA" | spl_df2_param == "NA"
same_param = spl_df1_param == spl_df2_param
vector_param = vector("character", length(spl_df1_param))
vector_param[same_param == TRUE] = "yes"
vector_param[same_param == FALSE] = "no"
vector_param[any_NA == TRUE] = "unknown"
d = cbind(d, vector_param)
return(d)
}
df_host = check_param(dist_df, 3)
colnames(df_host)[length(colnames(df_host))] = "same_host"
ggplot(df_host)+geom_point(aes(value.x,value.y,colour=same_host)) + theme(legend.justification=c(1,0), legend.position=c(1,0))
ggplot(df_host)+geom_point(aes(df_host$`1:500`,df_host$`501:1000`,colour=same_host)) + theme(legend.justification=c(1,0), legend.position=c(1,0))
df_host_sp = check_param(df_host, 5)
colnames(df_host_sp)[length(colnames(df_host_sp))] = "same_species"
ggplot(df_host_sp)+geom_point(aes(df_host_sp$`1:500`,df_host_sp$`501:1000`,colour=same_species)) + theme(legend.justification=c(1,0), legend.position=c(1,0))
dist_to_df = function(dist1, dist2){
d1 = dist2list(dist1)
d2 = dist2list(dist2)
d = merge(d1, d2, by=c("row", "col"))
return(d)
}
check_param = function(d, colnum){
spl_df1 = str_split(d$row, '_', simplify = TRUE)
spl_df2 = str_split(d$col, '_', simplify = TRUE)
spl_df1_param = spl_df1[,colnum]
spl_df2_param = spl_df2[,colnum]
any_NA = spl_df1_param == "NA" | spl_df2_param == "NA"
same_param = spl_df1_param == spl_df2_param
vector_param = vector("character", length(spl_df1_param))
vector_param[same_param == TRUE] = "yes"
vector_param[same_param == FALSE] = "no"
vector_param[any_NA == TRUE] = "unknown"
d = cbind(d, vector_param)
return(d)
}
dist_df = dist_to_df(l_PDCP[[2]],l_PDCP[[3]])
library(recDplot)
library(colorRamps)
library(gplots)
library(stringr)
fig_path = "D:/MY_FILES/DATA/Lukashev/RNA_viruses/Astrovirus/rec_fig/"
path_al = "D:/MY_FILES/DATA/Lukashev/RNA_viruses/Astrovirus/fasta/"
mav_name = 'mav_all_1AB2_aln_noout_gt_trim.fasta'
mav = read.dna(paste(path_al, 'MAV/', mav_name, sep=""), format="fasta", as.character=TRUE)
mav[mav=='-'] <- NA
dist_to_df = function(dist1, dist2){
d1 = dist2list(dist1)
d2 = dist2list(dist2)
d = merge(d1, d2, by=c("row", "col"))
return(d)
}
check_param = function(d, colnum){
spl_df1 = str_split(d$row, '_', simplify = TRUE)
spl_df2 = str_split(d$col, '_', simplify = TRUE)
spl_df1_param = spl_df1[,colnum]
spl_df2_param = spl_df2[,colnum]
any_NA = spl_df1_param == "NA" | spl_df2_param == "NA"
same_param = spl_df1_param == spl_df2_param
vector_param = vector("character", length(spl_df1_param))
vector_param[same_param == TRUE] = "yes"
vector_param[same_param == FALSE] = "no"
vector_param[any_NA == TRUE] = "unknown"
d = cbind(d, vector_param)
return(d)
}
dist_df = dist_to_df(l_PDCP[[2]],l_PDCP[[3]])
l_PDCP <-  plot_PDCP(mav, 1, 500, 501, 1000)
dist_df = dist_to_df(l_PDCP[[2]],l_PDCP[[3]])
dist_df = check_param(dist_df, 3)
colnames(dist_df)[length(colnames(dist_df))] = "same_host"
ggplot(dist_df)+geom_point(aes(value.x,value.y,colour=same_host)) + theme(legend.justification=c(1,0), legend.position=c(1,0))
dist_df = check_param(dist_df, 5)
colnames(dist_df)[length(colnames(dist_df))] = "same_species"
ggplot(dist_df)+geom_point(aes(value.x,value.y,colour=same_species)) + theme(legend.justification=c(1,0), legend.position=c(1,0))
list_regs_mav <- list(
list(r1="ORF1ab",s1=1,e1=3411,r2="ORF2",s2=3412,e2=4764, n1="ORF1ab", n2="ORF2"),
list(r1="ORF1a",s1=1,e1=1956,r2="ORF1b",s2=1957,e2=3411, n1="ORF1a", n2="ORF1b"),
list(r1="ORF2",s1=3412,e1=4000,r2="ORF2",s2=4001,e2=4764, n1="5' half of ORF2", n2="3' half of ORF2")
)
for(reg in list_regs_mav){
print(paste('MAV', reg$n1,reg$n2, sep=', '))
l_PDCP <-  plot_PDCP(mav, reg$s1, reg$e1, reg$s2, reg$e2)
# adding new columns where the hosts and AV species' equality is checked in all comparisons
dist_df = dist_to_df(l_PDCP[[2]],l_PDCP[[3]])
dist_df = check_param(dist_df, 3)
colnames(dist_df)[length(colnames(dist_df))] = "same_host"
dist_df = check_param(dist_df, 5)
colnames(dist_df)[length(colnames(dist_df))] = "same_species"
plot = ggplot(dist_df)+geom_point(aes(value.x,value.y,colour=same_host)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) +
xlab(reg$n1) + ylab(reg$n2) + theme(text=element_text(size=21, family="Arial"))
ggsave(file=paste(fig_path,"mav_",paste(reg$r1, reg$r2, sep="_vs_"), "_host.svg", sep=""),
plot=plot,
# width=168, height=168,
width=126, height=126,
units="mm")
plot = ggplot(dist_df)+geom_point(aes(value.x,value.y,colour=same_species)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) +
xlab(reg$n1) + ylab(reg$n2) + theme(text=element_text(size=21, family="Arial"))
ggsave(file=paste(fig_path,"mav_",paste(reg$r1, reg$r2, sep="_vs_"), "_species.svg", sep=""),
plot=plot,
# width=168, height=168,
width=126, height=126,
units="mm")
}
for(reg in list_regs_mav){
print(paste('MAV', reg$n1,reg$n2, sep=', '))
l_PDCP <-  plot_PDCP(mav, reg$s1, reg$e1, reg$s2, reg$e2)
# adding new columns where the hosts and AV species' equality is checked in all comparisons
dist_df = dist_to_df(l_PDCP[[2]],l_PDCP[[3]])
dist_df = check_param(dist_df, 3)
colnames(dist_df)[length(colnames(dist_df))] = "same_host"
dist_df = check_param(dist_df, 5)
colnames(dist_df)[length(colnames(dist_df))] = "same_species"
plot = ggplot(dist_df)+geom_point(aes(value.x,value.y,colour=same_host)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) +
xlab(reg$n1) + ylab(reg$n2) + theme(text=element_text(size=21, family="Arial"))
ggsave(file=paste(fig_path,"mav_",paste(reg$r1, reg$r2, sep="_vs_"), "_host.png", sep=""),
plot=plot,
# width=168, height=168,
width=126, height=126,
units="mm")
plot = ggplot(dist_df)+geom_point(aes(value.x,value.y,colour=same_species)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) +
xlab(reg$n1) + ylab(reg$n2) + theme(text=element_text(size=21, family="Arial"))
ggsave(file=paste(fig_path,"mav_",paste(reg$r1, reg$r2, sep="_vs_"), "_species.png", sep=""),
plot=plot,
# width=168, height=168,
width=126, height=126,
units="mm")
}
