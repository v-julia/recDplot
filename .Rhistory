#library(dplyr)
library(stringr)
library(plotly)
library(spaa)
fig_path = 'J:/GoogleDrive(julie.vakulenko)/Sapovirus_evolution_Artem/norovirus/alignments/'
path_to_al = 'J:/GoogleDrive(julie.vakulenko)/Sapovirus_evolution_Artem/norovirus/alignments/'
noro_name = 'norovirus_full_aln_100gp_0.5_genotyped.fasta'
noro = read.dna(paste(path_to_al, noro_name, sep=""), format="fasta", as.character=TRUE)
# ВОТ ОНА, ТА САМАЯ СТРОЧКА
noro[noro=='-'] <- NA
l = plot_dist_test(noro, 6688,7060,7061,7431)
l[[1]]
ggplotly(l[[1]])
df = find_recomb_names(as.matrix(l[[2]]), 0.43, 0.6, as.matrix(l[[3]]), 0.45, 0.55)
df
as.matrix(l[[2]])
a = as.matrix(l[[2]])
View(a)
a = as.matrix(l[2])
View(a)
a
View(a)
View(a)
a
l[2]
View(l)
>>>>>>> 0919abefcc7dd7f2d3c4232420241c42c0027c17
library("recDplot")
library(ggplot2)
library(reticulate)
library("ape")
library("seqinr")
library(sjstats)
library("spider")
library("gridExtra")
#library(hexbin)
library(grid)
library(gplots)
library(colorRamps)
<<<<<<< HEAD
=======
fig_path = "J:/Virology/RNA_viruses/Lagovirus/figures/"
path_al = "J:/Virology/RNA_viruses/Lagovirus/"
lago_name = 'Lagovirus_full_aln_0.5_less_amb.fasta'
lago = read.dna(paste(path_al, lago_name, sep=""), format="fasta", as.character=TRUE)
lago[lago=='-'] <- NA
lago_rmse = plot_rmse(lago, 50, 400,"pdist","pairwise")
heatmap.2(as.matrix(lago_rmse),Rowv = FALSE, Colv = "Rowv", dendrogram = 'none',col=matlab.like, main="Lagovirus(window=800,step=100)",tracecol=NA)
View(lago)
dna_object = lago
step = 50
window = 400
method = "pdist"
modification = "pairwise"
length_aln = length(dna_object[1,]) #length of alignment
num_seq = length(dna_object[,1]) # number of sequences in alignment
starts = seq(from=0, to=length_aln-window, by = step) # start positions of genomic regions
starts[1]=1
ends = seq(from=window, to = length_aln, by = step) # end positions of genomic regions
if (length_aln%%step>step){ends=c(ends,length_aln)}
df_intervals = cbind(starts,ends) #intervals
View(df_intervals)
#dataframe to store RMSE values of each comparison
rmse_df = data.frame(matrix(ncol=length(starts), nrow = length(starts)))
colnames(rmse_df)=starts
rownames(rmse_df)=starts
#list of distance matrices for each pair of genomic regions
dist_matrices = list()
for (i in 1:nrow(df_intervals)){
cat("\r", "Calculating distances in interval", i)
slice = dna_object[1:num_seq, seq(from = df_intervals[i,"starts"], to = df_intervals[i,"ends"], by=1)]
#dist_matrices[[i]] = dist.dna(slice,  as.matrix = TRUE,  model = "JC69")
if (method == "pdist"){
if (modification=="pairwise"){
dist_matrices[[i]] = dist.gene(slice, method = "percentage",  pairwise.deletion = TRUE)}
else {
dist_matrices[[i]] = dist.gene(slice, method = "percentage",  pairwise.deletion = FALSE)}
}
else {
if (method == "JC"){dist_matrices[[i]] = dist.dna(slice,  as.matrix = TRUE,  model = "JC69")}
if (method == "Kimura"){dist_matrices[[i]] = dist.dna(slice,  as.matrix = TRUE,  model = "K80")}
if (method == "TN"){dist_matrices[[i]] = dist.dna(slice,  as.matrix = TRUE,  model = "K80")}
#else{print("Unknown method")}
}
}
n = nrow(df_intervals)
print(length(dist_matrices))
for (i in 1:n){
cat("\r", "Calculating rmse in row", i)
for (j in i:n){
#for (j in 1:(n)){
#print(paste(toString(i), toString(j), sep=","))
#fits pairwise distance comparison plots linear model, calculates rmse
rmse_i_j = (rmse(lm(dist_matrices[[j]]~dist_matrices[[i]])) + rmse(lm(dist_matrices[[i]]~dist_matrices[[j]]))) /2.0
#rmse_i_j = rmse(lm(dist_matrices[[j]]~dist_matrices[[i]]))
rmse_df[i,j] = rmse_i_j
rmse_df[j,i] = rmse_i_j
}
}
lm(dist_matrices[[j]]~dist_matrices[[i]])
i
j
dist_matrices[[j]]
m1 = dist_matrices[[j]]
m2 = dist_matrices[[j]]
lm(dist_matrices[[j]]~dist_matrices[[i]]))
lm(dist_matrices[[j]]~dist_matrices[[i]])
library("recDplot")
install.packages("spaa")
>>>>>>> 0919abefcc7dd7f2d3c4232420241c42c0027c17
library("recDplot")
library(ggplot2)
library(reticulate)
library("ape")
library("seqinr")
library(sjstats)
library("spider")
library("gridExtra")
#library(hexbin)
library(grid)
library(gplots)
library(colorRamps)
<<<<<<< HEAD
sars_name = '110420_gisaid_cov2020_sequences_res_aln_1e-05_noUTR.fasta'
sars = read.dna(paste(path_al, 'sars-2/', sars_name, sep=""), format="fasta", as.character=TRUE)
#path_figure = "D:/Users/User/Google Диск/Coronaviruses/paper/figures/"
path_figure = "D:/Virology/Coronaviruses/paper/figures2/"
path_al = "D:/Virology/Coronaviruses/gb/"
sars_name = '110420_gisaid_cov2020_sequences_res_aln_1e-05_noUTR.fasta'
sars = read.dna(paste(path_al, 'sars-2/', sars_name, sep=""), format="fasta", as.character=TRUE)
sars[sars=='-'] <- NA
contr = plot_control(sars)
contr = plot_control(sars)
contr_sars = contr[[1]]
contr_sars # + stat_bin2d()
ggsave(file=paste(path_figure, "control_sars1e-5gaps.svg", sep=""), plot=contr_beta, width=10, height=8)
ggsave(file=paste(path_figure, "control_sars1e-5gaps.svg", sep=""), plot=contr_sars, width=10, height=8)
sars_test = plot_dist_test(sars, 3000, 4000, 13500, 14500)
sars_test = plot_dist_test(sars, 3000, 4000, 13500, 14500)
plot_sars = sars_test[[1]]
plot_sars # + stat_bin2d()
ggsave(file=paste(path_figure, "distplt_sars1e-5gaps_3000-4000_13500-14500.svg", sep=""), plot=plot_sars, width=10, height=8)
plot_sars
sars_name = '110420_gisaid_cov2020_sequences_res_aln_1e-05_noUTR_human.fasta'
sars = read.dna(paste(path_al, 'sars-2/', sars_name, sep=""), format="fasta", as.character=TRUE)
sars[sars=='-'] <- NA
sars = read.dna(paste(path_al, 'sars-2/', sars_name, sep=""), format="fasta", as.character=TRUE)
sars_name = '110420_gisaid_cov2020_sequences_res_aln_1e-05_noUTR_human.fasta'
sars = read.dna(paste(path_al, 'sars-2/', sars_name, sep=""), format="fasta", as.character=TRUE)
sars = read.dna(paste(path_al, 'sars-2/', sars_name, sep=""), format="fasta", as.character=TRUE)
sars[sars=='-'] <- NA
sars_rmse = plot_rmse(sars, 100, 1000,"pdist","pairwise")
sars_rmse = plot_rmse(sars, 100, 1000,"pdist","pairwise")
svg(file=paste(path_figure, "sars2_rmse_human.svg", sep=""))
heatmap.2(as.matrix(sars_rmse[nrow(sars_rmse):1,]),Rowv = FALSE, Colv = "Rowv", dendrogram = 'none',col=matlab.like, main="SARS-2, rmse (window=1000,step=100)",tracecol=NA)
dev.off()
heatmap.2(as.matrix(sars_rmse[nrow(sars_rmse):1,]),Rowv = FALSE, Colv = "Rowv", dendrogram = 'none',col=matlab.like, main="SARS-2, rmse (window=1000,step=100)",tracecol=NA)
contr = plot_control(sars)
contr_sars = contr[[1]]
contr_sars # + stat_bin2d()
ggsave(file=paste(path_figure, "control_sars1e-5gaps_human.svg", sep=""), plot=contr_sars, width=10, height=8)
contr_sars  + stat_bin2d(bins=30)
contr_sars  + stat_bin2d()
contr_sars  + stat_bin2d(bins=50)
ggplot(data.frame(contr[[2]],contr[[3]]),aes(contr[[2]],contr[[3]]))
contr[[2]]
ggplot(data.frame(as.vector(contr[[2]]),as.vector(contr[[3]])),aes(as.vector(contr[[2]]),as.vector(contr[[3]])))
ggplot(data.frame(as.vector(contr[[2]]),as.vector(contr[[3]])),aes(as.vector(contr[[2]]),as.vector(contr[[3]]))) + stat_bin2d(binwidth = 0.003)
ggplot(data.frame(as.vector(contr[[2]]),as.vector(contr[[3]])),aes(as.vector(contr[[2]]),as.vector(contr[[3]]))) + stat_bin2d(binwidth)
ggplot(data.frame(as.vector(contr[[2]]),as.vector(contr[[3]])),aes(as.vector(contr[[2]]),as.vector(contr[[3]]))) + stat_bin2d()
contr = plot_control(sars)
contr = plot_control(sars)
contr_sars = contr[[1]]
contr_sars
ggsave(file=paste(path_figure, "control_sars1e-5gaps_human.svg", sep=""), plot=contr_sars, width=10, height=8)
contr_sars
contr_sars + stat_bin2d()
ggsave(file=paste(path_figure, "control_sars1e-5gaps_human.svg", sep=""), plot=contr_sars + stat_bin2d(), width=10, height=8)
sars_test = plot_dist_test(sars, 1, 1000, 16501, 17500)
sars_test = plot_dist_test(sars, 1, 1000, 16501, 17500)
plot_sars = sars_test[[1]]
plot_sars
sars_test = plot_dist_test(sars, 1, 1000, 16501, 17500)
sars_test = plot_dist_test(sars, 1, 1000, 16501, 17500)
plot_sars = sars_test[[1]]
plot_sars
ggsave(file=paste(path_figure, "distplt_sars1e-5gaps_1-1000_16501-17500.svg", sep=""), plot=plot_sars, width=10, height=8)
plot_sars
sars_test = plot_dist_test(sars, 5501, 6500, 27701, 28700)
plot_sars = sars_test[[1]]
ggsave(file=paste(path_figure, "distplt_sars1e-5gaps_5501-6500_27701-28700.svg", sep=""), plot=plot_sars, width=10, height=8)
plot_sars
ggsave(file=paste(path_figure, "distplt_sars1e-5gaps_5501-6500_27701-28700.svg", sep=""), plot=plot_sars, width=10, height=8)
plot_sars
=======
fig_path = "J:/Virology/RNA_viruses/Lagovirus/figures/"
path_al = "J:/Virology/RNA_viruses/Lagovirus/"
lago_name = 'Lagovirus_full_aln_0.5_less_amb.fasta'
lago = read.dna(paste(path_al, lago_name, sep=""), format="fasta", as.character=TRUE)
lago[lago=='-'] <- NA
dna_object = lago
step = 50
window = 400
method = "pdist"
modification = "pairwise"
length_aln = length(dna_object[1,]) #length of alignment
num_seq = length(dna_object[,1]) # number of sequences in alignment
starts = seq(from=0, to=length_aln-window, by = step) # start positions of genomic regions
starts[1]=1
ends = seq(from=window, to = length_aln, by = step) # end positions of genomic regions
if (length_aln%%step>step){ends=c(ends,length_aln)}
df_intervals = cbind(starts,ends) #intervals
#dataframe to store RMSE values of each comparison
rmse_df = data.frame(matrix(ncol=length(starts), nrow = length(starts)))
colnames(rmse_df)=starts
rownames(rmse_df)=starts
cat("Total number of intervals", nrow(df_intervals))
#list of distance matrices for each pair of genomic regions
dist_matrices = list()
for (i in 1:nrow(df_intervals)){
cat("\r", "Calculating distances in interval", i)
slice = dna_object[1:num_seq, seq(from = df_intervals[i,"starts"], to = df_intervals[i,"ends"], by=1)]
#dist_matrices[[i]] = dist.dna(slice,  as.matrix = TRUE,  model = "JC69")
if (method == "pdist"){
if (modification=="pairwise"){
dist_matrices[[i]] = dist.gene(slice, method = "percentage",  pairwise.deletion = TRUE)}
else {
dist_matrices[[i]] = dist.gene(slice, method = "percentage",  pairwise.deletion = FALSE)}
}
else {
if (method == "JC"){dist_matrices[[i]] = dist.dna(slice,  as.matrix = TRUE,  model = "JC69")}
if (method == "Kimura"){dist_matrices[[i]] = dist.dna(slice,  as.matrix = TRUE,  model = "K80")}
if (method == "TN"){dist_matrices[[i]] = dist.dna(slice,  as.matrix = TRUE,  model = "K80")}
#else{print("Unknown method")}
}
}
n = nrow(df_intervals)
print(length(dist_matrices))
for (i in 1:n){
cat("\r", "Calculating rmse in row", i)
for (j in i:n){
#for (j in 1:(n)){
#print(paste(toString(i), toString(j), sep=","))
#fits pairwise distance comparison plots linear model, calculates rmse
rmse_i_j = (rmse(lm(dist_matrices[[j]]~dist_matrices[[i]])) + rmse(lm(dist_matrices[[i]]~dist_matrices[[j]]))) /2.0
#rmse_i_j = rmse(lm(dist_matrices[[j]]~dist_matrices[[i]]))
rmse_df[i,j] = rmse_i_j
rmse_df[j,i] = rmse_i_j
}
}
lago_rmse = plot_rmse(lago, 50, 400,"pdist","pairwise")
heatmap.2(as.matrix(lago_rmse),Rowv = FALSE, Colv = "Rowv", dendrogram = 'none',col=matlab.like, main="Lagovirus(window=800,step=100)",tracecol=NA)
svg(file=paste(fig_path, "lago_rmse_800-100.svg", sep=""))
heatmap.2(as.matrix(lago_rmse),Rowv = FALSE, Colv = "Rowv", dendrogram = 'none',col=matlab.like, main="Lagovirus(window=800,step=100),",tracecol=NA)
dev.off()
heatmap.2(as.matrix(lago_rmse),Rowv = FALSE, Colv = "Rowv", dendrogram = 'none',col=matlab.like, main="Lagovirus(window=800,step=100),",tracecol=NA)
svg(file=paste(fig_path, "lago_rmse_800-100.svg", sep=""))
heatmap.2(as.matrix(lago_rmse[nrow(lago_rmse):1,]),Rowv = FALSE, Colv = "Rowv", dendrogram = 'none',col=matlab.like, main="Lagovirus(window=800,step=100),",tracecol=NA)
dev.off()
heatmap.2(as.matrix(lago_rmse[nrow(lago_rmse):1,]),Rowv = FALSE, Colv = "Rowv", dendrogram = 'none',col=matlab.like, main="Lagovirus(window=800,step=100)",tracecol=NA)
svg(file=paste(fig_path, "lago_rmse_800-100.svg", sep=""))
heatmap.2(as.matrix(lago_rmse[nrow(lago_rmse):1,]),Rowv = FALSE, Colv = "Rowv", dendrogram = 'none',col=matlab.like, main="Lagovirus(window=800,step=100),",tracecol=NA)
dev.off()
l = plot_dist_test(lago, 1,5298,5299,7401)
l[[1]]
l = plot_dist_test(lago, 1,7044,7045,7401)
l[[1]]
l = plot_dist_test(lago, 1,5298,5299,7401)
l[[1]]
l = plot_dist_test(lago, 5299,7044,7045,7401)
l[[1]]
l = plot_dist_test(lago, 1,2649,2650,5298)
l[[1]]
l = plot_dist_test(lago, 3757,4527,4528,5298)
l[[1]]
l = plot_dist_test(lago, 3757,4527,4528,5298)
l[[1]]
l = plot_dist_test(lago, 5299,6171,6172,7044)
l[[1]]
>>>>>>> 0919abefcc7dd7f2d3c4232420241c42c0027c17
library(recDplot)
install.packages("roxygen2")
install.packages("spider")
library(spider)
library(sjstats)
library(recDplot)
library("recDplot")
library(ggplot2)
library("ape")
library("seqinr")
library(sjstats)
install.packages("sjstats")
count_pairs = function(df){
spl_df1 = str_split(df$`1`, '_', simplify = TRUE)
spl_df2 = str_split(df$`2`, '_', simplify = TRUE)
genogroups1 = paste(spl_df1[,4], spl_df1[,6], sep='_')
genogroups2 = paste(spl_df2[,4], spl_df2[,6], sep='_')
pairs = paste(genogroups1, genogroups2, sep=' vs ')
a = aggregate(data.frame(count = pairs), list(value = pairs), length)
return(a)
}
library(stringr)
library(colorRamps)
fig_path_nov = "J:/Virology/RNA_viruses/Norovirus/figures/"
path_al = "J:/Virology/RNA_viruses/Norovirus/"
noro_name = 'norovirus_ren.fasta'
noro = read.dna(paste(path_al, noro_name, sep=""), format="fasta", as.character=TRUE)
path_al = "D:/Virology/RNA_viruses/Norovirus/"
fig_path_nov = "D:/Virology/RNA_viruses/Norovirus/figures/"
noro_name = 'norovirus_ren.fasta'
noro = read.dna(paste(path_al, noro_name, sep=""), format="fasta", as.character=TRUE)
noro[noro=='-'] <- NA
svg(file=paste(fig_path_nov, "noro_rmse_50_600.svg", sep=""))
heatmap.2(as.matrix(noro_rmse50_600[nrow(noro_rmse50_600):1,]),Rowv = FALSE, Colv = "Rowv", dendrogram = 'none',col=matlab.like, main="Norovirus(window=600,step=50),",tracecol=NA)
noro_rmse50_600 = plot_rmse(noro, 50, 600,"pdist","pairwise")
library("recDplot")
library(ggplot2)
library("ape")
library("seqinr")
library(sjstats)
library("recDplot")
library(ggplot2)
library("ape")
library("seqinr")
library("sjstats")
library("sjstats")
library("spider")
library("gridExtra")
library(gplots)
library(colorRamps)
library(stringr)
library("spider")
rmse('')
rmse()
sjstats::rmse()
install.packages("bayestestR")
library("sjstats")
install.packages("rlang")
library("sjstats")
sessionInfo()
install.packages("rlang")
library("sjstats")
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
library(ggplot2)
library("ape")
library("seqinr")
library(sjstats)
library("spider")
library("gridExtra")
#library(hexbin)
library(grid)
library(gplots)
library(colorRamps)
library(stringr)
library(dplyr)
fig_path = "D:/MY_FILES/DATA/Lukashev/RNA_viruses/Lagovirus/figures/"
path_al = "D:/MY_FILES/DATA/Lukashev/RNA_viruses/Lagovirus/"
path_al = "D:/Virology/RNA_viruses/Lagovirus/"
lago_name = 'Lagovirus_full_aln_0.5_less_amb_genotyped.fasta'
lago = read.dna(paste(path_al, lago_name, sep=""), format="fasta", as.character=TRUE)
lago[lago=='-'] <- NA
dist_df_lago_list = plot_PDCP_control(lago, 1, 3000, 3001, 7000)
plot_PDCP_control = function(dna_object, st1,e1,st2,e2){
# subalignments for odd and even sites
al_odd=dna_object[1:length(dna_object[,1]), seq(from = 1, to = length(dna_object[1,]), by=2)]
al_even=dna_object[1:length(dna_object[,1]), seq(from = 2, to = length(dna_object[1,]), by=2)]
# distance matrices for each region
dna_sl_dist1_odd <-dist.gene(al_odd, method = "percentage",  pairwise.deletion = TRUE)
dna_sl_dist2_even <-dist.gene(al_even, method = "percentage",  pairwise.deletion = TRUE)
# adding random noise to distances matrices' values
dist1_odd = as.vector(dna_sl_dist1_odd) + rnorm(length(dna_sl_dist1_odd),mean = 0,sd= 0.0001)
dist2_even = as.vector(dna_sl_dist2_even) + rnorm(length(dna_sl_dist2_even),mean = 0,sd= 0.0001)
dna_sl1=dna_object[1:length(dna_object[,1]), seq(from = st1, to = e1, by=1)]
dna_sl2=dna_object[1:length(dna_object[,1]), seq(from = st2, to = e2, by=1)]
# distance matrices for each region
dna_sl_dist1 <-dist.gene(dna_sl1, method = "percentage",  pairwise.deletion = TRUE)
dna_sl_dist2 <-dist.gene(dna_sl2, method = "percentage",  pairwise.deletion = TRUE)
# adding random noise to distances matrices' values
dist1= as.vector(dna_sl_dist1) + rnorm(length(dna_sl_dist1),mean = 0,sd= 0.0001)
dist2= as.vector(dna_sl_dist2) + rnorm(length(dna_sl_dist2),mean = 0,sd= 0.0001)
dist_df = data.frame(dist1_odd, dist2_even, dist1, dist2)
ggplot() +  stat_bin2d(data = dist_df, aes(dist1, dist2), binwidth = 0.003) + scale_fill_gradientn(colours=c("blue","red")) +
stat_bin2d(data = dist_df, aes(dist1_odd, dist2_even, alpha=0.5), binwidth = 0.003, color='black') +
theme(legend.justification=c(1,0), legend.position=c(1,0)) +
xlab(paste(toString(st1),toString(e1),sep=":"))+ylab(paste(toString(st2),toString(e2),sep=":"))
ggplot() +  geom_point(data = dist_df, aes(dist1, dist2), color="red") +
geom_point(data = dist_df, aes(dist1_odd, dist2_even, alpha=0.5))
return(dist_df)
}
dist_df_lago_list = plot_PDCP_control(lago, 1, 3000, 3001, 7000)
df1 = data.frame(dist_df_lago_list$dist1, dist_df_lago_list$dist2, factor="real")
colnames(df1) = c('dist1', 'dist2')
df2 =  data.frame(dist_df_lago_list$dist1_odd, dist_df_lago_list$dist2_even, factor="control")
colnames(df2) = c('dist1', 'dist2')
d = rbind(df1, df2)
colnames(d) = c('dist1', 'dist2', 'cond')
ggplot(data = d, aes(dist1, dist2)) +  geom_point(aes(color=cond)) +  scale_color_manual(values = c("dodgerblue4", "dimgrey"))+
#geom_point(data = d, aes(dist1, dist2), alpha=0.5, color="dimgrey")+
theme(legend.justification=c(1,0), legend.position=c(1,0)) +
xlab(paste(toString(1),toString(3000),sep=":"))+ylab(paste(toString(3001),toString(7000),sep=":"))+
guides(color = guide_legend(title = ""))
ggplot() +  stat_bin2d(data = dist_df_lago, aes(dist1, dist2), binwidth = 0.003) + scale_fill_gradientn(colours=c("blue","red")) +
stat_bin2d(data = dist_df_lago, aes(dist1_odd, dist2_even, alpha=0.5), binwidth = 0.003, color='black') +
theme(legend.justification=c(1,0), legend.position=c(1,0)) +
xlab(paste(toString(1),toString(3000),sep=":"))+ylab(paste(toString(3001),toString(7000),sep=":"))
ggplot() +  stat_bin2d(data = dist_df_lago_list, aes(dist1, dist2), binwidth = 0.003) + scale_fill_gradientn(colours=c("blue","red")) +
stat_bin2d(data = dist_df_lago_list, aes(dist1_odd, dist2_even, alpha=0.5), binwidth = 0.003, color='black') +
theme(legend.justification=c(1,0), legend.position=c(1,0)) +
xlab(paste(toString(1),toString(3000),sep=":"))+ylab(paste(toString(3001),toString(7000),sep=":"))
ggplot() +  stat_bin2d(data = dist_df_lago_list, aes(dist1, dist2), binwidth = 0.003) + scale_fill_gradientn(colours=c("blue","red")) +
stat_bin2d(data = dist_df_lago_list, aes(dist1_odd, dist2_even), binwidth = 0.003, color='black') +
theme(legend.justification=c(1,0), legend.position=c(1,0)) +
xlab(paste(toString(1),toString(3000),sep=":"))+ylab(paste(toString(3001),toString(7000),sep=":"))
ggplot(data = d, aes(dist1, dist2)) +  stat_bin2d(aes(color=cond), binwidth = 0.003) + scale_fill_gradientn(colours=c("blue","red")) +
#stat_bin2d(data = dist_df_lago_list, aes(dist1_odd, dist2_even), binwidth = 0.003, color='black') +
theme(legend.justification=c(1,0), legend.position=c(1,0)) +
xlab(paste(toString(1),toString(3000),sep=":"))+ylab(paste(toString(3001),toString(7000),sep=":"))
ggplot(data = d, aes(dist1, dist2)) +  stat_bin2d(aes(color=cond), binwidth = 0.003) + #scale_fill_gradientn(colours=c("blue","red")) +
#stat_bin2d(data = dist_df_lago_list, aes(dist1_odd, dist2_even), binwidth = 0.003, color='black') +
theme(legend.justification=c(1,0), legend.position=c(1,0)) +
xlab(paste(toString(1),toString(3000),sep=":"))+ylab(paste(toString(3001),toString(7000),sep=":"))
ggplot(data=dist_df_lago_list) +
stat_bin2d(aes(x=dist1, y=dist2), fill="#002BFF") +
stat_bin2d(aes(x=dist1_odd, y=dist2_even, alpha=..count..), fill="#FFD500") +
guides(fill=FALSE, alpha=FALSE) +
xlab("Range Transformed Units")
ggplot(data=dist_df_lago_list) +
stat_bin2d(aes(x=dist1, y=dist2), fill="#002BFF") +
stat_bin2d(aes(x=dist1_odd, y=dist2_even), fill="#FFD500") +
guides(fill=FALSE, alpha=FALSE) +
xlab("Range Transformed Units")
ggplot(data=dist_df_lago_list) +
stat_bin2d(aes(x=dist1, y=dist2, alpha=..count..), fill="#002BFF") +
stat_bin2d(aes(x=dist1_odd, y=dist2_even, alpha=..count..), fill="#FFD500") +
guides(fill=FALSE, alpha=FALSE) +
xlab("Range Transformed Units")
library(recDplot)
library("recDplot")
fig_path = "J:/Virology/RNA_viruses/Lagovirus/figures/"
fig_path = "D:/Virology/RNA_viruses/Lagovirus/figures/"
path_al = "D:/Virology/RNA_viruses/Lagovirus/"
lago_name = 'Lagovirus_full_aln_0.5_less_amb_genotyped.fasta'
lago = read.dna(paste(path_al, lago_name, sep=""), format="fasta", as.character=TRUE)
lago[lago=='-'] <- NA
l = plot_dist_test(lago, 1,7044,7045,7401)
l[[1]]
l = plot_PDCP_control(lago, 1,7044,7045,7401)
l = plot_PDCP_control(lago, 1,7044,7045,7401)
l[[1]]
l[[2]]
View(l)
l = plot_PDCP_control(lago, 1,7044,7045,7401)
library(recDplot)
library("recDplot")
path_al = "D:/Virology/RNA_viruses/Lagovirus/"
lago_name = 'Lagovirus_full_aln_0.5_less_amb_genotyped.fasta'
lago = read.dna(paste(path_al, lago_name, sep=""), format="fasta", as.character=TRUE)
lago[lago=='-'] <- NA
l = plot_PDCP_control(lago, 1,7044,7045,7401)
library(recDplot)
library("recDplot")
library(ggplot2)
library("ape")
library("seqinr")
library(sjstats)
library("spider")
library("gridExtra")
#library(hexbin)
library(grid)
library(gplots)
library(colorRamps)
library(stringr)
fig_path = "D:/Virology/RNA_viruses/Lagovirus/figures/"
path_al = "D:/Virology/RNA_viruses/Lagovirus/"
lago_name = 'Lagovirus_full_aln_0.5_less_amb_genotyped.fasta'
lago = read.dna(paste(path_al, lago_name, sep=""), format="fasta", as.character=TRUE)
lago[lago=='-'] <- NA
l = plot_PDCP_control(lago, 1,7044,7045,7401)
plot_PDCP_control = function(dna_object, st1,e1,st2,e2){
# subalignments for odd and even sites
al_odd=dna_object[1:length(dna_object[,1]), seq(from = 1, to = length(dna_object[1,]), by=2)]
al_even=dna_object[1:length(dna_object[,1]), seq(from = 2, to = length(dna_object[1,]), by=2)]
# distance matrices for each region
dna_sl_dist1_odd <-dist.gene(al_odd, method = "percentage",  pairwise.deletion = TRUE)
dna_sl_dist2_even <-dist.gene(al_even, method = "percentage",  pairwise.deletion = TRUE)
# adding random noise to distances matrices' values
dist1_odd = as.vector(dna_sl_dist1_odd) + rnorm(length(dna_sl_dist1_odd),mean = 0,sd= 0.0001)
dist2_even = as.vector(dna_sl_dist2_even) + rnorm(length(dna_sl_dist2_even),mean = 0,sd= 0.0001)
dna_sl1=dna_object[1:length(dna_object[,1]), seq(from = st1, to = e1, by=1)]
dna_sl2=dna_object[1:length(dna_object[,1]), seq(from = st2, to = e2, by=1)]
# distance matrices for each region
dna_sl_dist1 <-dist.gene(dna_sl1, method = "percentage",  pairwise.deletion = TRUE)
dna_sl_dist2 <-dist.gene(dna_sl2, method = "percentage",  pairwise.deletion = TRUE)
# adding random noise to distances matrices' values
dist1= as.vector(dna_sl_dist1) + rnorm(length(dna_sl_dist1),mean = 0,sd= 0.0001)
dist2= as.vector(dna_sl_dist2) + rnorm(length(dna_sl_dist2),mean = 0,sd= 0.0001)
df1 = data.frame(dist1, dist2, factor="real")
colnames(df1) = c('dist1', 'dist2')
df2 =  data.frame(dist1_odd, dist2_even, factor="control")
colnames(df2) = c('dist1', 'dist2')
df = rbind(df1, df2)
colnames(df) = c('dist1', 'dist2', 'cond')
PDCP = ggplot(data = df, aes(dist1, dist2)) +  geom_point(aes(color=cond)) +  scale_color_manual(values = c("dimgrey", "dodgerblue4"))+
theme(legend.justification=c(1,0), legend.position=c(1,0)) +
xlab(paste(toString(st1),toString(e1),sep=":"))+ylab(paste(toString(st2),toString(e2),sep=":"))+
guides(color = guide_legend(title = ""))
return(list(PDCP, df))
}
l = plot_PDCP_control(lago, 1,7044,7045,7401)
l[1]
l = plot_PDCP_control(lago, 1,5298,5299,7401)
l[[1]]
