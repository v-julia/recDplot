spl_df1_host = spl_df1[,3]
spl_df2 = str_split(d$col, '_', simplify = TRUE)
spl_df2_host = spl_df2[,3]
res = spl_df1_host == spl_df2_host
only_one_NA = xor(spl_df1_host=="NA", spl_df2_host=="NA")
both_na = (spl_df1_host=="NA" & spl_df2_host=="NA")
any_NA = spl_df1_host=="NA" | spl_df2_host=="NA"
host_vector = vector("character", length(spl_df1_host))
host_vector[any_NA == TRUE] = "unknown"
host_vector[res == TRUE] = "yes"
host_vector[res == FALSE] = "no"
host_vector
d = cbind(d, host_vector)
colnames(d)[length(colnames(d))] = "same_host"
ggplot(df_host)+geom_point(aes(value.x,value.y,colour=same_host)) + theme(legend.justification=c(1,0), legend.position=c(1,0))
check_param = function(dist1, dist2, colnum){
d1 = dist2list(dist1)
d2 = dist2list(dist2)
d = merge(d1, d2, by=c("row", "col"))
spl_df1 = str_split(d$row, '_', simplify = TRUE)
spl_df2 = str_split(d$col, '_', simplify = TRUE)
spl_df1_param = spl_df1[,colnum]
spl_df2_param = spl_df2[,colnum]
any_NA = spl_df1_param == "NA" | spl_df2_param == "NA"
same_param = spl_df1_param == spl_df2_param
vector_param = vector("character", length(spl_df1_param))
vector_param[same_param == TRUE] = "yes"
vector_param[same_param == FALSE] = "no"
vector_param[any_NA == TRUE] = "unknown"
d = cbind(d, vector_param)
return(d)
}
df_host = check_param(l_PDCP[[2]], l_PDCP[[3]], 3)
colnames(df_host)[length(colnames(df_host))] = "same_host"
ggplot(df_host)+geom_point(aes(value.x,value.y,colour=same_host)) + theme(legend.justification=c(1,0), legend.position=c(1,0))
dist_to_df = function(dist1, st1, e1, dist2, st2, e2){
d1 = dist2list(dist1)
d2 = dist2list(dist2)
d = merge(d1, d2, by=c("row", "col"))
colnames(d)[3] = paste(toString(st1),toString(e1),sep=":")
colnames(d)[4] = paste(toString(st2),toString(e2),sep=":")
return(d)
}
dist_df = dist_to_df(l_PDCP[[2]], 1, 500, l_PDCP[[3]], 501, 1000)
View(dist_df)
check_param = function(d, colnum){
spl_df1 = str_split(d$row, '_', simplify = TRUE)
spl_df2 = str_split(d$col, '_', simplify = TRUE)
spl_df1_param = spl_df1[,colnum]
spl_df2_param = spl_df2[,colnum]
any_NA = spl_df1_param == "NA" | spl_df2_param == "NA"
same_param = spl_df1_param == spl_df2_param
vector_param = vector("character", length(spl_df1_param))
vector_param[same_param == TRUE] = "yes"
vector_param[same_param == FALSE] = "no"
vector_param[any_NA == TRUE] = "unknown"
d = cbind(d, vector_param)
return(d)
}
df_host = check_param(dist_df, 3)
colnames(df_host)[length(colnames(df_host))] = "same_host"
ggplot(df_host)+geom_point(aes(value.x,value.y,colour=same_host)) + theme(legend.justification=c(1,0), legend.position=c(1,0))
ggplot(df_host)+geom_point(aes(df_host$`1:500`,df_host$`501:1000`,colour=same_host)) + theme(legend.justification=c(1,0), legend.position=c(1,0))
df_host_sp = check_param(df_host, 5)
colnames(df_host_sp)[length(colnames(df_host_sp))] = "same_species"
ggplot(df_host_sp)+geom_point(aes(df_host_sp$`1:500`,df_host_sp$`501:1000`,colour=same_species)) + theme(legend.justification=c(1,0), legend.position=c(1,0))
dist_to_df = function(dist1, dist2){
d1 = dist2list(dist1)
d2 = dist2list(dist2)
d = merge(d1, d2, by=c("row", "col"))
return(d)
}
check_param = function(d, colnum){
spl_df1 = str_split(d$row, '_', simplify = TRUE)
spl_df2 = str_split(d$col, '_', simplify = TRUE)
spl_df1_param = spl_df1[,colnum]
spl_df2_param = spl_df2[,colnum]
any_NA = spl_df1_param == "NA" | spl_df2_param == "NA"
same_param = spl_df1_param == spl_df2_param
vector_param = vector("character", length(spl_df1_param))
vector_param[same_param == TRUE] = "yes"
vector_param[same_param == FALSE] = "no"
vector_param[any_NA == TRUE] = "unknown"
d = cbind(d, vector_param)
return(d)
}
dist_df = dist_to_df(l_PDCP[[2]],l_PDCP[[3]])
library(recDplot)
library(colorRamps)
library(gplots)
library(stringr)
fig_path = "D:/MY_FILES/DATA/Lukashev/RNA_viruses/Astrovirus/rec_fig/"
path_al = "D:/MY_FILES/DATA/Lukashev/RNA_viruses/Astrovirus/fasta/"
mav_name = 'mav_all_1AB2_aln_noout_gt_trim.fasta'
mav = read.dna(paste(path_al, 'MAV/', mav_name, sep=""), format="fasta", as.character=TRUE)
mav[mav=='-'] <- NA
dist_to_df = function(dist1, dist2){
d1 = dist2list(dist1)
d2 = dist2list(dist2)
d = merge(d1, d2, by=c("row", "col"))
return(d)
}
check_param = function(d, colnum){
spl_df1 = str_split(d$row, '_', simplify = TRUE)
spl_df2 = str_split(d$col, '_', simplify = TRUE)
spl_df1_param = spl_df1[,colnum]
spl_df2_param = spl_df2[,colnum]
any_NA = spl_df1_param == "NA" | spl_df2_param == "NA"
same_param = spl_df1_param == spl_df2_param
vector_param = vector("character", length(spl_df1_param))
vector_param[same_param == TRUE] = "yes"
vector_param[same_param == FALSE] = "no"
vector_param[any_NA == TRUE] = "unknown"
d = cbind(d, vector_param)
return(d)
}
dist_df = dist_to_df(l_PDCP[[2]],l_PDCP[[3]])
l_PDCP <-  plot_PDCP(mav, 1, 500, 501, 1000)
dist_df = dist_to_df(l_PDCP[[2]],l_PDCP[[3]])
dist_df = check_param(dist_df, 3)
colnames(dist_df)[length(colnames(dist_df))] = "same_host"
ggplot(dist_df)+geom_point(aes(value.x,value.y,colour=same_host)) + theme(legend.justification=c(1,0), legend.position=c(1,0))
dist_df = check_param(dist_df, 5)
colnames(dist_df)[length(colnames(dist_df))] = "same_species"
ggplot(dist_df)+geom_point(aes(value.x,value.y,colour=same_species)) + theme(legend.justification=c(1,0), legend.position=c(1,0))
list_regs_mav <- list(
list(r1="ORF1ab",s1=1,e1=3411,r2="ORF2",s2=3412,e2=4764, n1="ORF1ab", n2="ORF2"),
list(r1="ORF1a",s1=1,e1=1956,r2="ORF1b",s2=1957,e2=3411, n1="ORF1a", n2="ORF1b"),
list(r1="ORF2",s1=3412,e1=4000,r2="ORF2",s2=4001,e2=4764, n1="5' half of ORF2", n2="3' half of ORF2")
)
for(reg in list_regs_mav){
print(paste('MAV', reg$n1,reg$n2, sep=', '))
l_PDCP <-  plot_PDCP(mav, reg$s1, reg$e1, reg$s2, reg$e2)
# adding new columns where the hosts and AV species' equality is checked in all comparisons
dist_df = dist_to_df(l_PDCP[[2]],l_PDCP[[3]])
dist_df = check_param(dist_df, 3)
colnames(dist_df)[length(colnames(dist_df))] = "same_host"
dist_df = check_param(dist_df, 5)
colnames(dist_df)[length(colnames(dist_df))] = "same_species"
plot = ggplot(dist_df)+geom_point(aes(value.x,value.y,colour=same_host)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) +
xlab(reg$n1) + ylab(reg$n2) + theme(text=element_text(size=21, family="Arial"))
ggsave(file=paste(fig_path,"mav_",paste(reg$r1, reg$r2, sep="_vs_"), "_host.svg", sep=""),
plot=plot,
# width=168, height=168,
width=126, height=126,
units="mm")
plot = ggplot(dist_df)+geom_point(aes(value.x,value.y,colour=same_species)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) +
xlab(reg$n1) + ylab(reg$n2) + theme(text=element_text(size=21, family="Arial"))
ggsave(file=paste(fig_path,"mav_",paste(reg$r1, reg$r2, sep="_vs_"), "_species.svg", sep=""),
plot=plot,
# width=168, height=168,
width=126, height=126,
units="mm")
}
for(reg in list_regs_mav){
print(paste('MAV', reg$n1,reg$n2, sep=', '))
l_PDCP <-  plot_PDCP(mav, reg$s1, reg$e1, reg$s2, reg$e2)
# adding new columns where the hosts and AV species' equality is checked in all comparisons
dist_df = dist_to_df(l_PDCP[[2]],l_PDCP[[3]])
dist_df = check_param(dist_df, 3)
colnames(dist_df)[length(colnames(dist_df))] = "same_host"
dist_df = check_param(dist_df, 5)
colnames(dist_df)[length(colnames(dist_df))] = "same_species"
plot = ggplot(dist_df)+geom_point(aes(value.x,value.y,colour=same_host)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) +
xlab(reg$n1) + ylab(reg$n2) + theme(text=element_text(size=21, family="Arial"))
ggsave(file=paste(fig_path,"mav_",paste(reg$r1, reg$r2, sep="_vs_"), "_host.png", sep=""),
plot=plot,
# width=168, height=168,
width=126, height=126,
units="mm")
plot = ggplot(dist_df)+geom_point(aes(value.x,value.y,colour=same_species)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) +
xlab(reg$n1) + ylab(reg$n2) + theme(text=element_text(size=21, family="Arial"))
ggsave(file=paste(fig_path,"mav_",paste(reg$r1, reg$r2, sep="_vs_"), "_species.png", sep=""),
plot=plot,
# width=168, height=168,
width=126, height=126,
units="mm")
}
install.packages("plotly")
p = l_PDCP[1]
library(recDplot)
library(colorRamps)
library(gplots)
library(stringr)
fig_path = "D:/MY_FILES/DATA/Lukashev/RNA_viruses/Astrovirus/rec_fig/"
path_al = "D:/MY_FILES/DATA/Lukashev/RNA_viruses/Astrovirus/fasta/"
fig_path = "D:/Virology/RNA_viruses/Astrovirus/rec_fig/"
path_al = "D:/Virology/RNA_viruses/Astrovirus/fasta/"
mav_name = 'mav_all_1AB2_aln_noout_gt_trim_ren.fasta'
mav = read.dna(paste(path_al, 'MAV/', mav_name, sep=""), format="fasta", as.character=TRUE)
mav[mav=='-'] <- NA
l_PDCP <-  plot_PDCP(mav, 1, 500, 501, 1000)
p = l_PDCP[1]
dist_df = dist_to_df(l_PDCP[[2]],l_PDCP[[3]])
dist_to_df = function(dist1, dist2){
d1 = dist2list(dist1)
d2 = dist2list(dist2)
d = merge(d1, d2, by=c("row", "col"))
return(d)
}
check_param = function(d, colnum){
spl_df1 = str_split(d$row, '/', simplify = TRUE)
spl_df2 = str_split(d$col, '/', simplify = TRUE)
spl_df1_param = spl_df1[,colnum]
spl_df2_param = spl_df2[,colnum]
any_NA = spl_df1_param == "NA" | spl_df2_param == "NA"
same_param = spl_df1_param == spl_df2_param
vector_param = vector("character", length(spl_df1_param))
vector_param[same_param == TRUE] = "yes"
vector_param[same_param == FALSE] = "no"
vector_param[any_NA == TRUE] = "unknown"
d = cbind(d, vector_param)
return(d)
}
l_PDCP <-  plot_PDCP(mav, 1, 500, 501, 1000)
dist_df = dist_to_df(l_PDCP[[2]],l_PDCP[[3]])
dist_df = check_param(dist_df, 3)
colnames(dist_df)[length(colnames(dist_df))] = "same_host"
plot_ly(dist_df, x = ~value.x, y = ~value.y)
library(plotly)
plot_ly(dist_df, x = ~value.x, y = ~value.y)
plot_ly(dist_df, x = ~value.x, y = ~value.y, color= ~same_host)
plot_ly(dist_df, x = ~value.x, y = ~value.y, color= ~same_host,  type = 'scatter')
plot_ly(dist_df, x = ~value.x, y = ~value.y, color= ~same_host,  type = 'scatter', colors = "Set1")
plot_ly(dist_df, x = ~value.x, y = ~value.y, color= ~same_host, colors = "Set1")
plot_ly(dist_df, x = ~value.x, y = ~value.y, color= ~same_host, colors = "Set1",text = ~paste(row, '\n', col))
plot_ly(dist_df, x = ~value.x, y = ~value.y, color= ~same_host, colors = "Set1",text = ~paste(row, '\n', col)) +  xlab("1-500") + ylab("501-1000")
plot_ly(dist_df, x = ~value.x, y = ~value.y, color= ~same_host, colors = "Set1", text = ~paste(row, '\n', col),
labels={"value.x": "1-500", "value.y": "501-1000",   "same_host": "Same host"
})
plot_ly(dist_df, x = ~value.x, y = ~value.y, color= ~same_host,colors = "Set1", text = ~paste(row, '\n', col))%>%
layout(xaxis = list(title = '1-500'),
yaxis = list(title = '501-1000'), legend = list(title=list(text='Same host')))
p = plot_ly(dist_df, x = ~value.x, y = ~value.y, color= ~same_host,colors = "Set1", text = ~paste(row, '\n', col))%>%
layout(xaxis = list(title = '1-500'),
yaxis = list(title = '501-1000'), legend = list(title=list(text='Same host')))
ggsave(file=paste(fig_path,"mav_1-1000_host_plotly.png", sep=""),
plot=p,
# width=168, height=168,
width=126, height=126,
units="mm")
pl = plot_ly(dist_df, x = ~value.x, y = ~value.y, color= ~same_host,colors = "Set1", text = ~paste(row, '\n', col))%>%
layout(xaxis = list(title = '1-500'),
yaxis = list(title = '501-1000'), legend = list(title=list(text='Same host')))
plotly::export(p = pl, #the graph to export
file =paste(fig_path,"mav_1-1000_host_plotly.png", sep=""))
install.packages("webshot")
plotly::export(p = pl, #the graph to export
file =paste(fig_path,"mav_1-1000_host_plotly.png", sep=""))
library(webshot)
plotly::export(p = pl, #the graph to export
file =paste(fig_path,"mav_1-1000_host_plotly.png", sep=""))
orca(p = pl, #the graph to export
file =paste(fig_path,"mav_1-1000_host_plotly.png", sep=""))
save_image(p = pl, #the graph to export
file =paste(fig_path,"mav_1-1000_host_plotly.png", sep=""))
install.packages("reticulate")
save_image(p = pl, #the graph to export
file =paste(fig_path,"mav_1-1000_host_plotly.png", sep=""))
library(recDplot)
library(recDplot)
library(colorRamps)
library(gplots)
library(stringr)
library(plotly)
fig_path = "D:/Virology/RNA_viruses/Astrovirus/rec_fig/"
path_al = "D:/Virology/RNA_viruses/Astrovirus/fasta/"
mav_name = 'mav_all_1AB2_aln_noout_gt_trim_ren.fasta'
mav = read.dna(paste(path_al, 'MAV/', mav_name, sep=""), format="fasta", as.character=TRUE)
mav[mav=='-'] <- NA
l_PDCP <-  plot_PDCP(mav, 1, 500, 501, 1000)
p = l_PDCP[1]
dist_df = l_PDCP[2]
dist_df
dist_df = check_param(dist_df, 3)
check_param = function(d, colnum){
spl_df1 = str_split(d$row, '/', simplify = TRUE)
spl_df2 = str_split(d$col, '/', simplify = TRUE)
spl_df1_param = spl_df1[,colnum]
spl_df2_param = spl_df2[,colnum]
any_NA = spl_df1_param == "NA" | spl_df2_param == "NA"
same_param = spl_df1_param == spl_df2_param
vector_param = vector("character", length(spl_df1_param))
vector_param[same_param == TRUE] = "yes"
vector_param[same_param == FALSE] = "no"
vector_param[any_NA == TRUE] = "unknown"
d = cbind(d, vector_param)
return(d)
}
dist_df = check_param(dist_df, 3)
check_param = function(d, colnum){
spl_df1 = str_split(d$row, '/', simplify = TRUE)
spl_df2 = str_split(d$col, '/', simplify = TRUE)
spl_df1_param = spl_df1[,colnum]
spl_df2_param = spl_df2[,colnum]
any_NA = spl_df1_param == "NA" | spl_df2_param == "NA"
same_param = spl_df1_param == spl_df2_param
vector_param = vector("character", length(spl_df1_param))
vector_param[same_param == TRUE] = "yes"
vector_param[same_param == FALSE] = "no"
vector_param[any_NA == TRUE] = "unknown"
d = cbind(d, vector_param)
return(d)
}
dist_df = check_param(dist_df, 3)
check_param = function(d, colnum){
spl_df1 = str_split(d$row, '/', simplify = TRUE)
spl_df2 = str_split(d$col, '/', simplify = TRUE)
print(spl_df1)
spl_df1_param = spl_df1[,colnum]
spl_df2_param = spl_df2[,colnum]
any_NA = spl_df1_param == "NA" | spl_df2_param == "NA"
same_param = spl_df1_param == spl_df2_param
vector_param = vector("character", length(spl_df1_param))
vector_param[same_param == TRUE] = "yes"
vector_param[same_param == FALSE] = "no"
vector_param[any_NA == TRUE] = "unknown"
d = cbind(d, vector_param)
return(d)
}
dist_df = check_param(dist_df, 3)
dist_df = l_PDCP[2]
View(dist_df)
check_param = function(d, colnum){
spl_df1 = str_split(d$row, '/', simplify = TRUE)
spl_df2 = str_split(d$col, '/', simplify = TRUE)
spl_df1_param = spl_df1[,colnum]
spl_df2_param = spl_df2[,colnum]
any_NA = spl_df1_param == "NA" | spl_df2_param == "NA"
same_param = spl_df1_param == spl_df2_param
vector_param = vector("character", length(spl_df1_param))
vector_param[same_param == TRUE] = "yes"
vector_param[same_param == FALSE] = "no"
vector_param[any_NA == TRUE] = "unknown"
d = cbind(d, vector_param)
return(d)
}
l_PDCP <-  plot_PDCP(mav, 1, 500, 501, 1000)
p = l_PDCP[[1]]
dist_df = l_PDCP[[2]]
dist_df = check_param(dist_df, 3)
colnames(dist_df)[length(colnames(dist_df))] = "same_host"
pl = plot_ly(dist_df, x = ~value.x, y = ~value.y, color= ~same_host,colors = "Set1", text = ~paste(row, '\n', col))%>%
layout(xaxis = list(title = '1-500'),
yaxis = list(title = '501-1000'), legend = list(title=list(text='Same host')))
save_image(p = pl, #the graph to export
file =paste(fig_path,"mav_1-1000_host_plotly.png", sep=""))
dist_df = check_param(dist_df, 5)
colnames(dist_df)[length(colnames(dist_df))] = "same_species"
pl = plot_ly(dist_df, x = ~value.x, y = ~value.y, color= ~same_species,colors = "Set1", text = ~paste(row, '\n', col))%>%
layout(xaxis = list(title = '1-500'),
yaxis = list(title = '501-1000'), legend = list(title=list(text='Same species')))
pl
mav_name = 'mav_all_1AB2_aln_noout_gt_trim_ren.fasta'
mav = read.dna(paste(path_al, 'MAV/', mav_name, sep=""), format="fasta", as.character=TRUE)
mav[mav=='-'] <- NA
l_PDCP <-  plot_PDCP(mav, 1, 500, 501, 1000)
p = l_PDCP[[1]]
dist_df = l_PDCP[[2]]
dist_df = check_param(dist_df, 3)
colnames(dist_df)[length(colnames(dist_df))] = "same_host"
pl = plot_ly(dist_df, x = ~value.x, y = ~value.y, color= ~same_host,colors = "Set1", text = ~paste(row, '\n', col))%>%
layout(xaxis = list(title = '1-500'),
yaxis = list(title = '501-1000'), legend = list(title=list(text='Same host')))
pl
dist_df = check_param(dist_df, 5)
colnames(dist_df)[length(colnames(dist_df))] = "same_species"
pl = plot_ly(dist_df, x = ~value.x, y = ~value.y, color= ~same_species,colors = "Set1", text = ~paste(row, '\n', col))%>%
layout(xaxis = list(title = '1-500'),
yaxis = list(title = '501-1000'), legend = list(title=list(text='Same species')))
pl
usethis::use_vignette("my-vignette")
devtools::check(manual=TRUE)
library(tinytex)
devtools::check(manual=TRUE)
devtools::check(manual=TRUE)
devtools::check(manual=TRUE)
tinytex::is_tinytex()
devtools::check(manual=TRUE)
install.packages('tinytex')
tinytex::install_tinytex()
tlmgr search --global --file "/pdflatex.sty"
tinytex::reinstall_tinytex()
devtools::check(manual=TRUE)
tinytex::uninstall_tinytex()
library(tinytex)
pdflatex()\
pdflatex()
tinytex::install_tinytex()
tinytex::install_tinytex()
writeLines(c(
'\\documentclass{article}',
'\\begin{document}', 'Hello world!', '\\end{document}'
), 'test.tex')
pdflatex('test.tex')
devtools::check(manual=TRUE)
devtools::check(manual=TRUE)
tinytex::is_tinytex()
devtools::check(manual=TRUE)
Sys.getenv('PATH')
Sys.getenv('PATH')
old_path <- Sys.getenv("PATH")
old_path
Sys.setenv(PATH = paste(old_path, "C:\\Users\\alxva\\AppData\\Roaming\\TinyTeX\\bin\\windows", sep = ";"))
Sys.getenv('PATH')
devtools::check(manual=TRUE)
build_manual(pkg = "RecDplot", path = NULL)
devtools::build_manual(pkg = "RecDplot", path = NULL)
devtools::build_manual(pkg = ".", path = NULL)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
devtools::build_manual(pkg = "D:/Virology/Scripts/recDplot", path = NULL)
rlang::last_trace()
tools::buildVignette()
devtools::check(manual=TRUE)
install.packages('xfun')
install.packages("xfun")
library(recDplot)
library(recDplot)
library(colorRamps)
library(ape)
alignment = read.dna("norovirus_example.fasta", format="fasta", as.character=TRUE)
alignment[alignment=='-'] <- NA
PDD_matrix = calc_PDDmatrix(dna_object=alignment, step=50, window=600, method="pdist", modification="pairwise") #calculate PDD matrix
heatmap.2(as.matrix(PDD_matrix), Rowv = FALSE, Colv = "Rowv", dendrogram = 'none', col=matlab.like, main="PDD matrix", tracecol=NA) # visualize PDD matrix as a heatmap
library(gplots)
heatmap.2(as.matrix(PDD_matrix), Rowv = FALSE, Colv = "Rowv", dendrogram = 'none', col=matlab.like, main="PDD matrix", tracecol=NA) # visualize PDD matrix as a heatmap
list_PDC <-  plot_PDCP(aln, 1, 500, 501, 1000)
list_PDC <-  plot_PDCP(alignment, 1, 500, 501, 1000)
list_PDC[1] # ggplot with PDC plot
head(list_PDC[2])
head(list_PDC[2], n=10)
head(list_PDC[2], n=5)
list_PDC <-  plot_PDCP(alignment, 1, 500, 501, 1000)
list_PDC[1] # ggplot with PDC plot
head(list_PDC[2], n=5)
head(list_PDC[2], n=5)
list_PDC <-  plot_PDCP(alignment, 1, 500, 501, 1000)
list_PDC[[1]] # ggplot with PDC plot
head(list_PDC[[2]], n=5)
list_PDC <-  plot_PDCP(alignment, 1, 500, 501, 1000)
list_PDC[[1]] # ggplot with PDC plot
head(list_PDC[[2]], n=5) # dataframe with distances between sequences in two regions
list_PDC <-  plot_PDCP(alignment, 1, 1000, 5000, 6000)
list_PDC[[1]] # ggplot with PDC plot
head(list_PDC[[2]], n=5) # dataframe with distances between sequences in two regions
list_control <-  plot_PDCP_control(alignment, 1, 500, 501, 1000)
list_control[[1]] # ggplot with PDC control
list_control <-  plot_PDCP_control(alignment, 1, 1000, 5000, 6000)
list_control[[1]] #  PDC control
head(list_control[[2]], n=5)
list_PDCP_with_control <-  plot_PDCP_with_control(alignment, 1, 1000, 5000, 6000)
list_PDCP_with_control[[1]] # ggplot with PDC and control in one figure
list_PDCP_with_control <-  plot_PDCP_with_control(alignment, 1, 1000, 5000, 6000)
list_PDCP_with_control[[1]] # ggplot with PDC and control in one figure
head(list_PDCP_with_control[[2]])
list_PDC <-  plot_PDCP(alignment, 1, 1000, 4000, 5000)
list_PDC[[1]] # ggplot with PDC plot
head(list_PDC[[2]], n=5) # dataframe with distances between sequences in two regions
list_control <-  plot_PDCP_control(alignment, 1, 1000, 4000, 5000)
list_control[[1]] #  PDC control
head(list_control[[2]], n=5)
list_PDCP_with_control <-  plot_PDCP_with_control(alignment, 1, 1000, 4000, 5000)
list_PDCP_with_control[[1]] # ggplot with PDC and control in one figure
head(list_PDCP_with_control[[2]])
list_control <-  plot_PDCP_control(alignment, 1, 1000, 6000, 7000)
list_control[[1]] #  PDC control
head(list_control[[2]], n=5)
list_PDCP_with_control <-  plot_PDCP_with_control(alignment, 1, 1000, 6000, 7000)
list_PDCP_with_control[[1]] # ggplot with PDC and control in one figure
head(list_PDCP_with_control[[2]])
list_PDCP_with_control <-  plot_PDCP_with_control(alignment, 1, 1000, 6300, 7300)
list_PDCP_with_control[[1]] # ggplot with PDC and control in one figure
head(list_PDCP_with_control[[2]])
list_PDCP_with_control <-  plot_PDCP_with_control(alignment, 1, 1000, 6000, 7000)
list_PDCP_with_control[[1]] # ggplot with PDC and control in one figure
head(list_PDCP_with_control[[2]])
list_control <-  plot_PDCP_control(alignment, 1, 1000, 6000, 7000)
list_control[[1]] #  PDC control
head(list_control[[2]], n=5)
list_PDC <-  plot_PDCP(alignment, 1, 1000, 6000, 7000)
list_PDC[[1]] # ggplot with PDC plot
head(list_PDC[[2]], n=5) # dataframe with distances between sequences in two regions
plot_ly(list_PDCP_with_control[[2]], x = ~value.x,
y = ~value.y, color= ~cond, colors = "Set1", text = ~paste(row, '\n', col))%>%
layout(xaxis = list(title = '1-1000'),
yaxis = list(title = '6000-7000'), legend = list(title=list(text='Interactive PDC plot with control')))
library(recDplot)
library(colorRamps)
library(gplots)
library(plotly)
library(ape)
alignment = read.dna("norovirus_example.fasta", format="fasta", as.character=TRUE)
alignment[alignment=='-'] <- NA
plot_ly(list_PDCP_with_control[[2]], x = ~value.x,
y = ~value.y, color= ~cond, colors = "Set1", text = ~paste(row, '\n', col))%>%
layout(xaxis = list(title = '1-1000'),
yaxis = list(title = '6000-7000'), legend = list(title=list(text='Interactive PDC plot with control')))
plot_ly(list_PDC[[2]], x = ~value.x,
y = ~value.y, color= ~cond, colors = "Set1", text = ~paste(row, '\n', col))%>%
layout(xaxis = list(title = '1-1000'),
yaxis = list(title = '6000-7000'), legend = list(title=list(text='Interactive PDC plot')))
plot_ly(list_PDC[[2]], x = ~value.x,
y = ~value.y, colors = "Set1", text = ~paste(row, '\n', col))%>%
layout(xaxis = list(title = '1-1000'),
yaxis = list(title = '6000-7000'), legend = list(title=list(text='Interactive PDC plot')))
list_PDC[[2]]\
list_PDC[[2]]
plot_ly(list_PDC[[2]],type="scatter", x = ~value.x,
y = ~value.y, colors = "Set1", text = ~paste(row, '\n', col))%>%
layout(xaxis = list(title = '1-1000'),
yaxis = list(title = '6000-7000'), legend = list(title=list(text='Interactive PDC plot')))
